version: '3.9'

services:
  # PostgreSQL com PostGIS
  db:
    image: postgis/postgis:15-3.3
    container_name: ondeatende-db
    environment:
      POSTGRES_DB: ondeatende
      POSTGRES_USER: ondeatende_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ondeatende_user -d ondeatende"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ondeatende-network

  # Redis para cache e Celery
  redis:
    image: redis:7-alpine
    container_name: ondeatende-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ondeatende-network

  # RabbitMQ para Celery (opcional, pode usar Redis)
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: ondeatende-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-guest}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ondeatende-network

  # Backend Django
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ondeatende-backend
    command: gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 4 --reload
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - DEBUG=${DEBUG:-True}
      - DB_HOST=db
      - DB_NAME=ondeatende
      - DB_USER=ondeatende_user
      - DB_PASSWORD=${DB_PASSWORD:-postgres123}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_HOST=rabbitmq
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ondeatende-network

  # Celery Worker
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ondeatende-celery
    command: celery -A config worker -l info
    volumes:
      - ./backend:/app
    env_file:
      - .env
    environment:
      - DEBUG=${DEBUG:-True}
      - DB_HOST=db
      - DB_NAME=ondeatende
      - DB_USER=ondeatende_user
      - DB_PASSWORD=${DB_PASSWORD:-postgres123}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_HOST=rabbitmq
    depends_on:
      - db
      - redis
      - rabbitmq
    networks:
      - ondeatende-network

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ondeatende-celery-beat
    command: celery -A config beat -l info
    volumes:
      - ./backend:/app
    env_file:
      - .env
    environment:
      - DEBUG=${DEBUG:-True}
      - DB_HOST=db
      - DB_NAME=ondeatende
      - DB_USER=ondeatende_user
      - DB_PASSWORD=${DB_PASSWORD:-postgres123}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - db
      - redis
    networks:
      - ondeatende-network

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-builder}
    container_name: ondeatende-frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "5173:5173"
    environment:
      - VITE_API_URL=http://localhost:8000/api/v1
      - VITE_WS_URL=ws://localhost:8000/ws
    depends_on:
      - backend
    command: npm run dev -- --host 0.0.0.0
    networks:
      - ondeatende-network

  # Nginx (Produção)
  nginx:
    image: nginx:alpine
    container_name: ondeatende-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - static_volume:/usr/share/nginx/html/static
      - media_volume:/usr/share/nginx/html/media
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - ondeatende-network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local

networks:
  ondeatende-network:
    driver: bridge